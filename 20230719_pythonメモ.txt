〇try-catch
https://note.nkmk.me/python-try-except-else-finally/#try-except

#tryセクションでエラーが発生した場合、except節の該当するexceptionに飛ぶ
try

#raise文で意図的に例外を作成し、発生させる事ができる。
#引数にはエラー文を設定できる
raise Exception(引数)

#例外名を自作にしたい場合、任意の例外名でクラスを作成し、Exceptionクラスを継承する
#特に中身の処理が必要な訳ではないので、クラスの中身はpass等でok
class 例外クラス名@自作(Exception):
    pass


#except 例外名　で特定のエラーに対して処理を設定できる。
#例外名を省略する事により、全ての例外をキャッチする事が可能
#例外が発生しても処理を行わずスルーしたい場合、「pass」と記述する
except

#正常終了時に実行する処理を記述　例外発生時は実行されない
else
    
#正常終了時、異常終了時に関わらず最後に必ず実行される
finally



〇exe化
https://camp.trainocate.co.jp/magazine/pyinstaller-python-exe/

〇クラス・メソッド分けのあれこれ

    〇クラス分け、メソッド分けの考え方
    https://syachiku-uz.info/develop/java/752/
        →とりあえずモジュール、クラス、メソッド分けを意識(コンストラクタの必要がなければクラスはいらないかも)
        １．機能や似てる処理について、分類しやすいものについて分ける
        ２．複数回同じ処理をしている部分については分ける
        ３．メインメソッドは多分分ける事はできない　する意味もない。　本処理の手順書のようなものなので


    〇クラス、メソッド、インスタンス、self
    https://camp.trainocate.co.jp/magazine/python-class/

    〇ファイル分け、クラス分け、メソッド分けの方法
    https://rikoubou.hatenablog.com/entry/2019/01/21/165232

    〇self
    https://qiita.com/baby-0105/items/c7b2d9b22780a326e4b7