〇二値化としきい値の話
文字はあまりにも種類が多いので、スコア部分のみを現行の画像認識で取得する方向に。
→これでもダメなら、もうフォントを自作するしか手段はないと思う

cv2.threshold(src, 3, 255, cv2.THRESH_BINARY)
第1引数...元画像
第2引数...しきい値
第3引数...maxValue　しきい値を満たした場合の値
第4引数...使用するしきい値処理のタイプ

つまり、文字が崩れたりしている場合、もう少ししきい値の許容レベルを下げる = 値を小さくする必要がある

せっかく座標毎に名前を付けているので、名前や項目別にしきい値処理用のメソッドをいくつも作成するのもアリかも



〇画像の類似度
参考サイト : https://qiita.com/kagami_t/items/a1cae07c9565ce501ced

本人確認処理を名前で判断しようと考えていたが、文字認識の精度があまりにも悪いので、出来る限り文字は読まない認識で
現状、本人印となる矢印の判定と、ブキの認識にしか使用しない想定だが、文字を読まない想定なら、ルールやステージ判定に使用するのもアリかも

１．判定用の画像を格納するフォルダを用意。
２．本人矢印のある座標をメモし、jsonに格納。
３．読み取った画像を１で作ったフォルダに格納
４．上記サイトを参考に、類似度を確認
５．ナワバリ、バンカラマッチ、Xマッチ、イベントマッチ、プライベートマッチ　全てのルールのリザルト画面でテストし、妥当な判定値を探す
    →類似値は、ある程度は優しめに設定をし、逆に本人矢印が無い場合には必ず弾かれるくらいの値を設定する
６．設定した判定値に対して類似値がそれ以下なら、本人フラグを立てる　そうでなければ本人フラグをオフにする
    →DB上では、discordの送信者からIDを選番し、本人フラグの立っているプレイヤー = 本人　とする(つまりプレイヤー名は表示しない想定)
    →バンカラオープン等、複数人が同じ試合を同時に送信する場合でも、送信者に対する本人フラグでつける
     (DB上には同じ試合が何個も存在する事になるが、気にしない)

    ※この方法が上手くいかない場合は、取得した画像のカラーコード(黄色 = 矢印の色)が、画像の何割を占めているか　等で本人判定が取れるかも